// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Decides whether to store in A Register
    And(a=instruction[15], b=instruction[5], out=alustoreinA);
    Not(in=instruction[15], out=instructstoreinA);
    Or(a=alustoreinA, b=instructstoreinA, out=storeinA);

    // Decides whether to store in D Register
    And(a=instruction[15], b=instruction[4], out=storeinD);

    // Decides whether to store in Memory
    And(a=instruction[15], b=instruction[3], out=writeM, out=check);
    // If we are writing to memory let's also update outM and addressM
    // Mux16(a=false, b=split, sel=check, out=addressM[0..14]);
    Mux16(a=false, b=aluout, sel=check, out=outM);

    Mux16(a=instruction, b=aluout, sel=instruction[15], out=inoralu); // from A-instruction or C-instruction
    ARegister(in=inoralu, load=storeinA, out=aout, out[0..14]=addressM);
    DRegister(in=aluout, load=storeinD, out=dout);

    Mux16(a=inM, b=aout, sel=instruction[12], out=AvM); // The a bit for C-instruction decides if using A or M. Do I care about not depending on instruction[12] if an A-instruction?
    ALU(x=AvM, y=dout, zx=instruction[11] , nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout, zr=j1, ng=j2);


    // Handle jumps
    Or(a=j1, b=j2, out=jj);
    Not(in=jj, out=j3);
    Xor(a=instruction[2], b=j1, out=x1);
    Xor(a=instruction[1], b=j2, out=x2);
    Xor(a=instruction[0], b=j3, out=x3);
    Not(in=x1, out=a1);
    Not(in=x2, out=a2);
    Not(in=x3, out=a3);
    And(a=a1, b=a2, out=b1);
    And(a=a3, b=b1, out=c1); // This is if they all line up, jump!

    // No jump if all zeros though
    Not(in=instruction[2], out=n1);
    Not(in=instruction[1], out=n2);
    Not(in=instruction[0], out=n3);

    And(a=n1,b=n2, out=noj1);
    And(a=noj1, b=n3, out=noj); // if this is 1 then don't jump!

    Mux(a=c1, b=false, sel=noj, out=dojump);

    PC(in=aout, load=dojump, inc=true, reset=reset, out[0..14]=pc);
    
}