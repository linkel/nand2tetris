<class>
<keyword> class </keyword>
<identifier> SquareGame </identifier>
<symbol> { </symbol>
<classVarDec><keyword> field </keyword>
<identifier> Square </identifier>
<identifier> square </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec><keyword> field </keyword>
<keyword> int </keyword>
<identifier> direction </identifier>
<symbol> ; </symbol>
</classVarDec>
<subroutineDec><keyword> constructor </keyword>
<identifier> SquareGame </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<parameterList />
<symbol> ) </symbol>
<subroutineBody><symbol> { </symbol>
<statements><letStatement><keyword> let </keyword>
<identifier> square </identifier>
<symbol> = </symbol>
<expression><term><identifier> Square </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<expressionList><expression><term><int_const> 0 </int_const>
</term>
</expression>
<symbol> , </symbol>
<expression><term><int_const> 0 </int_const>
</term>
</expression>
<symbol> , </symbol>
<expression><term><int_const> 30 </int_const>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement><keyword> let </keyword>
<identifier> direction </identifier>
<symbol> = </symbol>
<expression><term><int_const> 0 </int_const>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<returnStatement><keyword> return </keyword>
<expression><term><keyword> this </keyword>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec><subroutineDec><keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<parameterList />
<symbol> ) </symbol>
<subroutineBody><symbol> { </symbol>
<statements><doStatement><keyword> do </keyword>
<identifier> square </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<expressionList><expression><term /></expression></expressionList></doStatement></statements></subroutineBody></subroutineDec></class>